// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FLATFLEXV2_TABLES_H_
#define FLATBUFFERS_GENERATED_FLATFLEXV2_TABLES_H_

#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/flexbuffers.h"

namespace Tables {

struct Table;

struct Rows;

struct Table FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VERSION = 4,
    VT_DATA = 6
  };
  int32_t version() const {
    return GetField<int32_t>(VT_VERSION, 0);
  }
  bool mutate_version(int32_t _version) {
    return SetField<int32_t>(VT_VERSION, _version, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Rows>> *data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Rows>> *>(VT_DATA);
  }
  flatbuffers::Vector<flatbuffers::Offset<Rows>> *mutable_data() {
    return GetPointer<flatbuffers::Vector<flatbuffers::Offset<Rows>> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_VERSION) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.Verify(data()) &&
           verifier.VerifyVectorOfTables(data()) &&
           verifier.EndTable();
  }
};

struct TableBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(int32_t version) {
    fbb_.AddElement<int32_t>(Table::VT_VERSION, version, 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Rows>>> data) {
    fbb_.AddOffset(Table::VT_DATA, data);
  }
  explicit TableBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TableBuilder &operator=(const TableBuilder &);
  flatbuffers::Offset<Table> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Table>(end);
    return o;
  }
};

inline flatbuffers::Offset<Table> CreateTable(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t version = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Rows>>> data = 0) {
  TableBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_version(version);
  return builder_.Finish();
}

inline flatbuffers::Offset<Table> CreateTableDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t version = 0,
    const std::vector<flatbuffers::Offset<Rows>> *data = nullptr) {
  return Tables::CreateTable(
      _fbb,
      version,
      data ? _fbb.CreateVector<flatbuffers::Offset<Rows>>(*data) : 0);
}

struct Rows FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_ROWS = 6
  };
  int16_t ID() const {
    return GetField<int16_t>(VT_ID, 0);
  }
  bool mutate_ID(int16_t _ID) {
    return SetField<int16_t>(VT_ID, _ID, 0);
  }
  const flatbuffers::Vector<uint8_t> *rows() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_ROWS);
  }
  flatbuffers::Vector<uint8_t> *mutable_rows() {
    return GetPointer<flatbuffers::Vector<uint8_t> *>(VT_ROWS);
  }
  flexbuffers::Reference rows_flexbuffer_root() const {
    auto v = rows();
    return flexbuffers::GetRoot(v->Data(), v->size());
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_ID) &&
           VerifyOffset(verifier, VT_ROWS) &&
           verifier.Verify(rows()) &&
           verifier.EndTable();
  }
};

struct RowsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ID(int16_t ID) {
    fbb_.AddElement<int16_t>(Rows::VT_ID, ID, 0);
  }
  void add_rows(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> rows) {
    fbb_.AddOffset(Rows::VT_ROWS, rows);
  }
  explicit RowsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RowsBuilder &operator=(const RowsBuilder &);
  flatbuffers::Offset<Rows> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Rows>(end);
    return o;
  }
};

inline flatbuffers::Offset<Rows> CreateRows(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t ID = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> rows = 0) {
  RowsBuilder builder_(_fbb);
  builder_.add_rows(rows);
  builder_.add_ID(ID);
  return builder_.Finish();
}

inline flatbuffers::Offset<Rows> CreateRowsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t ID = 0,
    const std::vector<uint8_t> *rows = nullptr) {
  return Tables::CreateRows(
      _fbb,
      ID,
      rows ? _fbb.CreateVector<uint8_t>(*rows) : 0);
}

inline const Tables::Table *GetTable(const void *buf) {
  return flatbuffers::GetRoot<Tables::Table>(buf);
}

inline const Tables::Table *GetSizePrefixedTable(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Tables::Table>(buf);
}

inline Table *GetMutableTable(void *buf) {
  return flatbuffers::GetMutableRoot<Table>(buf);
}

inline bool VerifyTableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Tables::Table>(nullptr);
}

inline bool VerifySizePrefixedTableBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Tables::Table>(nullptr);
}

inline void FinishTableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tables::Table> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTableBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Tables::Table> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Tables

#endif  // FLATBUFFERS_GENERATED_FLATFLEXV2_TABLES_H_
